<?php

namespace MobileCart\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use MobileCart\CoreBundle\Constants\EntityConstants;
use MobileCart\CoreBundle\Entity\ContentSlot;

/**
 * ContentSlotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentSlotRepository
    extends EntityRepository
    implements CartRepositoryInterface
{
    /**
     * @return array
     */
    public function getSortableFields()
    {
        return [
            'id' => 'ID',
            'parent' => 'Content ID',
            'title' => 'Title',
        ];
    }

    /**
     * @return array
     */
    public function getFilterableFields()
    {
        return [
            [
                'code'  => 'id',
                'label' => 'ID',
                'type'  => 'number',
            ],
        ];
    }

    /**
     * @return bool
     */
    public function isEAV()
    {
        return false;
    }

    /**
     * @return bool
     */
    public function hasImages()
    {
        return false;
    }

    /**
     * @return mixed|string
     */
    public function getSearchField()
    {
        return 'title';
    }

    /**
     * @return int|mixed
     */
    public function getSearchMethod()
    {
        return self::SEARCH_METHOD_LIKE;
    }

    /**
     * @param $entity
     * @param array $slots
     * @return $this
     */
    public function updateSlots($entity, array $slots)
    {
        $objectType = EntityConstants::CONTENT_SLOT;
        if (is_int($entity)) {
            $entity = $this->find($objectType, $entity);
        }

        // get slots
        $currentSlots = $entity->getSlots();
        if ($currentSlots) {
            foreach($currentSlots as $contentSlot) {
                $found = false;
                foreach($slots as $idx => $data) {

                    if ($data['id'] != $contentSlot->getId()) {
                        continue;
                    }

                    switch($data['type']) {
                        case EntityConstants::CONTENT_TYPE_IMAGE:

                            // update slot
                            $contentSlot
                                ->setParent($entity)
                                ->setContentType(EntityConstants::CONTENT_TYPE_IMAGE)
                                ->setTitle($data['title'])
                                ->setBodyText($data['body_text'])
                                ->setSortOrder($data['sort_order'])
                                ->setAltText($data['alt_text'])
                                ->setUrl($data['url'])
                                ->setEmbedCode('')
                                ->setPath($data['path'])
                            ;

                            break;
                        case EntityConstants::CONTENT_TYPE_EMBED:

                            // update slot
                            $contentSlot
                                ->setParent($entity)
                                ->setContentType(EntityConstants::CONTENT_TYPE_EMBED)
                                ->setTitle($data['title'])
                                ->setBodyText($data['body_text'])
                                ->setSortOrder($data['sort_order'])
                                ->setAltText('')
                                ->setUrl('')
                                ->setEmbedCode($data['embed_code'])
                                ->setPath('')
                            ;

                            break;
                        case EntityConstants::CONTENT_TYPE_HTML:

                            // update slot
                            $contentSlot
                                ->setParent($entity)
                                ->setContentType(EntityConstants::CONTENT_TYPE_HTML)
                                ->setTitle($data['title'])
                                ->setBodyText($data['body_text'])
                                ->setSortOrder($data['sort_order'])
                                ->setAltText('')
                                ->setUrl('')
                                ->setEmbedCode('')
                                ->setPath('')
                            ;

                            break;
                        default:

                            break;
                    }

                    $this->persist($contentSlot);

                    unset($slots[$idx]);
                    $found = true;
                    break;
                }

                // remove the slot if it's not included
                if (!$found) {
                    $this->remove($contentSlot);
                }
            }
        }

        if ($slots) {
            foreach($slots as $data) {

                $contentSlot = $this->find($objectType, $data['id']);

                switch($data['type']) {
                    case EntityConstants::CONTENT_TYPE_IMAGE:

                        // update slot
                        $contentSlot
                            ->setParent($entity)
                            ->setContentType(EntityConstants::CONTENT_TYPE_IMAGE)
                            ->setTitle($data['title'])
                            ->setBodyText($data['body_text'])
                            ->setSortOrder($data['sort_order'])
                            ->setAltText($data['alt_text'])
                            ->setUrl($data['url'])
                            ->setEmbedCode('')
                            ->setPath($data['path'])
                        ;

                        break;
                    case EntityConstants::CONTENT_TYPE_EMBED:

                        // update slot
                        $contentSlot
                            ->setParent($entity)
                            ->setContentType(EntityConstants::CONTENT_TYPE_EMBED)
                            ->setTitle($data['title'])
                            ->setBodyText($data['body_text'])
                            ->setSortOrder($data['sort_order'])
                            ->setAltText('')
                            ->setUrl('')
                            ->setEmbedCode($data['embed_code'])
                            ->setPath('')
                        ;

                        break;
                    case EntityConstants::CONTENT_TYPE_HTML:

                        // update slot
                        $contentSlot
                            ->setParent($entity)
                            ->setContentType(EntityConstants::CONTENT_TYPE_HTML)
                            ->setTitle($data['title'])
                            ->setBodyText($data['body_text'])
                            ->setSortOrder($data['sort_order'])
                            ->setAltText('')
                            ->setUrl('')
                            ->setEmbedCode('')
                            ->setPath('')
                        ;

                        break;
                    default:

                        break;
                }

                $this->persist($contentSlot);
            }
        }

        return $this;
    }
}
